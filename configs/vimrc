" Vim Config Here
set nu
set ai
set ts=2
set sts=2
set sw=2
set bs=2
set et
set hlsearch
set autochdir
set cursorline
set cursorcolumn
set nocompatible
syntax on
filetype off


" Vim UI Config
"" These lines setup the environment to show graphics and colors correctly.
colorscheme monokai
set rtp+=/usr/local/lib/python2.7/site-packages/powerline/bindings/vim
set t_Co=256
let g:minBufExplForceSyntaxEnable = 1
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup
if ! has('gui_running')
   set ttimeoutlen=10
   augroup FastEscape
      autocmd!
      au InsertEnter * set timeoutlen=0
      au InsertLeave * set timeoutlen=1000
   augroup END
endif
set laststatus=2 " Always display the statusline in all windows
set guifont=Inconsolata\ for\ Powerline:h14
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline


" Plugin Config Here
"" othree/html5.vim
let g:html5_event_handler_attributes_complete = 1
let g:html5_rdfa_attributes_complete = 1
let g:html5_microdata_attributes_complete = 1
let g:html5_aria_attributes_complete = 1
"" NERDTree
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', '^node_modules$[[dir]]']
let NERDTreeChDirMode=2
"" Markdown
let g:mkdp_path_to_chrome = "open -a Google\\ Chrome"
"" ALE
let &runtimepath.=',~/.vim/bundle/ale'
let g:ale_sign_error = '>E'
let g:ale_sign_warning = '>W'
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip


" Plugin Manager Here
set rtp+=~/.vim/bundle/Vundle.vim
set runtimepath^=~/.vim/bundle/ctrlp.vim
call vundle#begin()
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'othree/html5.vim'
    Plugin 'gorodinskiy/vim-coloresque'
    Plugin 'othree/yajs.vim'
    Plugin 'othree/es.next.syntax.vim'
    Plugin 'scrooloose/nerdtree'
    Plugin 'Xuyuanp/nerdtree-git-plugin'
    Plugin 'iamcco/markdown-preview.vim'
    Plugin 'majutsushi/tagbar'
    Plugin 'w0rp/ale'
    Plugin 'ctrlpvim/ctrlp.vim'
    Plugin 'mileszs/ack.vim'
call vundle#end()
filetype plugin indent on


" AutoCMD Config
autocmd BufNewFile,BufRead * exec ":call AddTitle()"


" User Define Functions And Shortcuts
func! AddTitleA()
    if getline(1) != "/**" && getline(2) != "        Author: SpringHack - springhack@live.cn"
        if getline(1) != ""
            call append(0,"/**")
        else
            call setline(1,"/**")
        endif
        call append(1,"        Author: SpringHack - springhack@live.cn")
        call append(2,"        Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
        call append(3,"        Filename: ".expand("%"))
        call append(4,"        Description: Created by SpringHack using vim automatically.")
        call append(5,"**/")
    endif
    call setline(3,"        Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
    call setline(4,"        Filename: ".expand("%"))
endfunc

func! AddTitleB()
    if getline(1) != "<!DOCTYPE html>"
        call append(0,"<!DOCTYPE html>")
    endif
    if getline(2) != "<!--" && getline(3) != "        Author: SpringHack - springhack@live.cn"
        call append(1,"<!--")
        call append(2,"        Author: SpringHack - springhack@live.cn")
        call append(3,"        Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
        call append(4,"        Filename: ".expand("%"))
        call append(5,"        Description: Created by SpringHack using vim automatically.")
        call append(6,"-->")
    endif
    if getline(8) != "<html>"
        call append(7,"<html>")
        call append(8,"    <head>")
        call append(9,"        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>")
        call append(10,"        <title>Index</title>")
        call append(11,"    </head>")
        call append(12,"    <body>")
        call append(13,"    </body>")
        call append(14,"</html>")
    endif
    call setline(4,"        Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
    call setline(5,"        Filename: ".expand("%"))
endfunc

func! AddTitleC()
    if getline(1) != "<?php /**" && getline(2) != "        Author: SpringHack - springhack@live.cn"
        if getline(1) != ""
            call append(0,"<?php /**")
        else
            call setline(1,"<?php /**")
        endif
        call append(1,"        Author: SpringHack - springhack@live.cn")
        call append(2,"        Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
        call append(3,"        Filename: ".expand("%"))
        call append(4,"        Description: Created by SpringHack using vim automatically.")
        call append(5,"**/ ?>")
    endif
    call setline(3,"        Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
    call setline(4,"        Filename: ".expand("%"))
endfunc

func! AddTitle()
    let setA = ["h","c","cpp","js","css","java","javascript"]
    let setB = ["htm","html"]
    for i in range(1,len(setA))
        if &filetype == get(setA,i-1)
            call AddTitleA()
        endif
    endfor
    for i in range(1,len(setB))
        if &filetype == get(setB,i-1)
            call AddTitleB()
        endif
    endfor
    if &filetype == "php"
        call AddTitleC()
    endif
endfunc

func! CompileCode()
    w
    if &filetype == "cpp"
        call CompileGpp()
    elseif &filetype == "c"
        call CompileGcc()
    endif
endfunc

func! CompileGcc()
    !clear && echo -e '\033[0;32;1m>>>编译结果：\033[0m' && gcc -Wall -g % -o %<
endfunc

func! CompileGpp()
    !clear && echo -e '\033[0;32;1m>>>编译结果：\033[0m' && g++ -Wall -g % -o %<
endfunc

func! RunResultOfGNU()
    if &filetype == "c" || &filetype == "cpp"
        !clear && echo -e '\033[0;32;1m>>>运行结果：\033[0m' && ./%<
    endif
endfunc

func! RunPython()
    !clear && python %
endfunc

func! RunNodejs()
    !clear && node %
endfunc

func! BuildAll()
    w
    if &filetype == "cpp"
        exec "!clear && echo -e '\033[0;32;1m>>>编译结果：\033[0m' && g++ -Wall -lm -g % -o %< && echo -e '\033[0;32;1m>>>运行结果：\033[0m' && ./%<"
    elseif &filetype == "c"
        exec "!clear && echo -e '\033[0;32;1m>>>编译结果：\033[0m' && gcc -Wall -lm -g % -o %< && echo -e '\033[0;32;1m>>>运行结果：\033[0m' && ./%<"
    elseif &filetype == "python"
        call RunPython()
    elseif &filetype == "javascript" || &filetype == "js"
        call RunNodejs()
    endif
endfunc

command A call BuildAll()
command S call CompileCode()
command D call RunResultOfGNU()

" <leader> is \
"" About tab manage
noremap <silent><tab>t :tabnew<cr>
noremap <silent><tab>e :tabclose<cr>
noremap <silent><tab>n :tabn<cr>
noremap <silent><tab>p :tabp<cr>
noremap <silent><leader>1 :tabn 1<cr>
noremap <silent><leader>2 :tabn 2<cr>
noremap <silent><leader>3 :tabn 3<cr>
noremap <silent><leader>4 :tabn 4<cr>
noremap <silent><leader>5 :tabn 5<cr>
noremap <silent><leader>6 :tabn 6<cr>
noremap <silent><leader>7 :tabn 7<cr>
noremap <silent><leader>8 :tabn 8<cr>
noremap <silent><leader>9 :tabn 9<cr>
noremap <silent><leader>0 :tabn 10<cr>
"" About search
vnoremap // y/<c-r>"<cr>
